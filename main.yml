---
- name: Create VM
  hosts: localhost
  gather_facts: true

  vars_files:
    - config.yml

  vars:
    current_vm: "{{ vms | selectattr('name', 'search', default) | list | first }}"

  tasks:
    - name: Prepare VM Configuration
      set_fact:
        vm_name: "{{ current_vm['name'] }}"
        vm_password_sha512: "{{ current_vm['password'] | password_hash('sha512') }}"
        vm_memory: "{{ current_vm['memory'] }}"
        vm_cpus: "{{ current_vm['cpus'] }}"
        vm_base_image: "{{ current_vm['base_image'] }}"
        vm_uuid: "{{ current_vm['name'] | to_uuid }}"
        vm_filesystems: "{{ current_vm['filesystems']}}"

    - name: Create Volume Snapshot
      shell: |
        qemu-img create -f qcow2 -F qcow2 -b /var/lib/libvirt/images/{{ vm_base_image }}.img /var/lib/libvirt/images/{{ vm_name }}.img
      args:
        creates: '/var/lib/libvirt/images/{{ vm_name }}.img'
      become: true

    - name: Create a new VM
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm.xml.j2') }}"

    - name: Ensure VM is started
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2

    - name: Get Virtual Machine IP Address
      shell: |
        virsh domifaddr {{ vm_name }} | awk 'NR > 2 && NF { split($4, ip, "/"); print ip[1] }'
      register: vm_ip_output
      until: "vm_ip_output['stdout_lines'] is defined and vm_ip_output['stdout_lines'] | length > 0"
      retries: 15
      delay: 2

    - name: Get First IP Adress in List
      set_fact:
        vm_ip: "{{ vm_ip_output['stdout_lines'][0] }}"

    - add_host:
        name: vm_qemu
        groups: "{{ current_vm['groups'] }}"
        ansible_host: "{{ vm_name }}"
        ansible_user: root
        vm_name: "{{ vm_name }}"
        vm_password_sha512: "{{ vm_password_sha512 }}"
        vm_memory: "{{ vm_memory }}"
        vm_cpus: "{{ vm_cpus }}"
        vm_base_image: "{{ vm_base_image }}"
        vm_uuid: "{{ vm_uuid }}"
        vm_filesystems: "{{ vm_filesystems }}"

    - add_host:
        name: vm_ssh
        groups: "{{ current_vm['groups'] }}"
        ansible_host: "{{ vm_ip }}"
        ansible_user: "{{ ansible_user_id }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        vm_name: "{{ vm_name }}"
        vm_password_sha512: "{{ vm_password_sha512 }}"
        vm_memory: "{{ vm_memory }}"
        vm_cpus: "{{ vm_cpus }}"
        vm_base_image: "{{ vm_base_image }}"
        vm_uuid: "{{ vm_uuid }}"
        vm_filesystems: "{{ vm_filesystems }}"

- name: Configure VM SSH Connection
  hosts: vm_qemu
  gather_facts: false
  connection: community.libvirt.libvirt_qemu

  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:

    - name: Grab settings from localhost
      set_fact:
        username: "{{ hostvars['localhost']['ansible_user_id'] }}"
        useruid: "{{ hostvars['localhost']['ansible_user_uid'] }}"

    - name: Check if connection has already been provisioned for this user.
      stat:
        path: /home/{{ username }}/.provisioned
      register: provisioned

    - name: Provision SSH for account
      block:
        - name: Create new user.
          user:
            name: "{{ username }}"
            uid: "{{ useruid }}"
            password: "{{ vm_password_sha512 }}"
            create_home: yes
            groups: sudo
            state: present
            shell: /bin/bash
          register: newuser

        - name: Configure users .ssh directory.
          file:
            path: "{{ newuser.home }}/.ssh"
            state: directory
            owner: "{{ username }}"
            group: "{{ username }}"
            mode: 0700

        - name: Copy local users public key.
          copy:
            src: "{{ hostvars['localhost']['ansible_user_dir'] }}/.ssh/id_ed25519.pub"
            dest: "{{ newuser.home }}/.ssh/authorized_keys"
            owner: "{{ username }}"
            group: "{{ username }}"
            mode: 0600

        - name: Enable sudo passwordless login for user
          template:
            src: sudoers.j2
            dest: "/etc/sudoers.d/{{ username }}"
            owner: root
            group: root
            mode: 0440
            validate: /usr/sbin/visudo -cf %s

        - name: Write provisioned file
          ansible.builtin.file:
            path: "/home/{{ username }}/.provisioned"
            owner: "{{ username }}"
            group: "{{ username }}"
            mode: 0600
            state: touch
      when: not provisioned.stat.exists

    - name: Disable root login
      user:
        name: root
        password: '!'

- name: Configure VM
  hosts: vm_ssh
  gather_facts: true

  pre_tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:

    - name: Update and upgrade all packages
      apt:
        upgrade: yes
        update_cache: yes
      become: true
      register: upgrade

    - name: Reboot to make sure all upgrades are applied
      reboot:
        reboot_timeout: 3600
      become: true
      when: upgrade.changed

  roles:
    - role: vandycknick.security.ssh
    - role: vandycknick.dotfiles
    - role: vandycknick.python
    - role: vandycknick.terminal.neovim
    - role: vandycknick.terminal.st
    - role: vandycknick.terminal.zsh
    - role: vandycknick.terminal.tmux

  tasks:
    - name: Install QEMU guest additions
      apt:
        name:
          - qemu-guest-agent
          - spice-vdagent
        state: present
      become: true

    - name: Install i3 Desktop Environment
      import_tasks: tasks/i3.yml

    - name: Install Applications
      import_tasks: tasks/applications.yml

    - name: Auto mount shared drives
      ansible.posix.mount:
        src: "{{ item.name }}"
        path: "{{ item.source }}"
        fstype: "{{ item.driver }}"
        state: mounted
      with_items: "{{ vm_filesystems }}"
      become: true

  post_tasks:
    - name: Reboot machine
      reboot:
        reboot_timeout: 3600
      become: true
